<style>
    body {
        font-family: Arial, sans-serif;
    }

    .text-center {
        margin-top: 100px;
        text-align: center;
    }

    .user-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .user-box {
        border: 1px solid #ccc;
        padding: 20px;
        margin: 10px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        transition: box-shadow 0.3s;
        max-width: 600px;
        text-align: center;
    }

    .user-box:hover {
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
    }

    .user {
        font-size: 18px;
        font-weight: bold;
    }

    .btn-container {
        text-align: center;
        margin-top: 10px;
    }

    .btn {
        padding: 10px 20px;
        cursor: pointer;
    }

    .btn-delete,
    .btn-change-role {
        color: white;
        border: none;
    }

    .btn-delete {
        background-color: #ff4444;
        margin-right: 10px;
    }

    .btn-change-role {
        background-color: #33b5e5;
    }
</style>

<div class="text-center">
    <h1>{{ title }}</h1>
    <div class="mb-2">
        <button type="button" class="btn btn-delete btn-delete-inactive btn-lg">Delete Inactive Users</button>
    </div>
</div>

<div class="user-container">
    {{#each allUsers}}
    <div class="user-box">
        <h4 class="user-name mb-4">User Name: {{ this.first_name }} {{ this.last_name }}</h4>
        <h4 class="user-email user">User Email: {{ this.email }}</h4>
        <h4 class="user-rol user">User Role: {{ this.rol }}</h4>
        <h4 class="user-last-connection user mt-4">Last Connection: {{ this.last_connection }}</h4>

        <div class="btn-container">
            <button class="btn btn-delete delete-user" data-user-id="{{this._id}}"
                data-user-email={{this.email}}>Delete</button>
            <button class="btn btn-change-role" data-user-rol="{{this.rol}}" data-user-id="{{ this._id }}">Change
                Role</button>
        </div>
    </div>
    {{/each}}
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    // Event listener for change role buttons
    document.querySelectorAll(".btn-change-role").forEach((button, index) => {
        button.addEventListener("click", async (event) => {

            event.preventDefault();
            const userId = button.getAttribute("data-user-id");
            const userRol = button.getAttribute("data-user-rol");

            const { value: rol } = await Swal.fire({
                title: 'Select field validation',
                input: 'select',
                inputOptions: {
                    'Rols': {
                        user: 'User',
                        premium: 'Premium',

                    },
                },
                inputPlaceholder: 'Select a rol',
                showCancelButton: true,

                inputValidator: (value) => {
                    return new Promise((resolve) => {

                        if (userRol == value) {
                            resolve("The user already has that role");
                        } else {
                            resolve()
                        }
                    })
                }
            })

            if (rol) {

                Swal.fire({
                    title: `Change User Role to ${rol}`,
                    text: "Are you sure you want to change the user's role?",
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonText: "Yes",
                    cancelButtonText: "No",
                })
                    .then(async (result) => {
                        if (result.isConfirmed) {

                            try {

                                await fetch(`/api/users/premium/${userId}`, {
                                    method: "POST"
                                }).then(
                                    Swal.fire({
                                        title: "User role changed",
                                        text: `The user's role has been changed correctly to ${rol}`,
                                        icon: "success"
                                    }).then(() => {
                                        window.location.reload()
                                    })
                                )


                            } catch (err) {
                                console.error("Error: ", err)
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Something went wrong!', err,
                                })
                            }
                        }
                    })
            }
        });
    });

    document.querySelectorAll(".btn-delete-inactive").forEach((button, index) => {
        let swalLoading;
        button.addEventListener("click", async () => {

            const confirmDialog = await Swal.fire({
                title: "Delete Inactive Users",
                text: "Are you sure you want to delete inactive usesrs?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete",
                cancelButtonText: "No, cancel",
                dangerMode: true,
            });

            if (confirmDialog.isConfirmed) {
                swalLoading = Swal.fire({
                    title: "Please wait...",
                    text: "Deleting inactive users...",
                    showCancelButton: false,
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    onBeforeOpen: () => {
                        Swal.showLoading();
                    }
                });
            }

            try {
                const response = await fetch("/api/sending/mail/delete-inactive-accounts", {
                    method: "POST",
                })

                console.log(response)

                if (response.status == 201) {
                    swalLoading.close();

                    Swal.fire("Inactive Users Deleted!", "Inactive Users has been Deleted!", "success").then((result) => {
                        window.location.reload();
                    });

                } else if (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!',
                    });
                }
            } catch (error) {
                console.error(error)
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong catch!',
                });
            };
        });
    });

    // Event listener for delete buttons
    document.querySelectorAll(".delete-user").forEach((button, index) => {
        let swalLoading;
        button.addEventListener("click", async (event) => {
            event.preventDefault();
            const userId = button.getAttribute("data-user-id");
            const userRol = button.getAttribute("data-user-rol");
            const userEmail = button.getAttribute("data-user-email");

            // Abre el SweetAlert de confirmaciÃ³n
            const confirmDialog = await Swal.fire({
                title: "Delete User",
                text: "Are you sure you want to delete this user and their products?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete",
                cancelButtonText: "No, cancel",
                dangerMode: true,
            });

            if (confirmDialog.isConfirmed) {
                swalLoading = Swal.fire({
                    title: "Please wait...",
                    text: "Deleting user...",
                    showCancelButton: false,
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    onBeforeOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch("/api/sending/mail/delete-account", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            userEmail,
                        }),
                    });

                    if (response.ok) {
                        swalLoading.close();

                        button.closest(".user-box").remove();

                        Swal.fire("User Deleted!", "The user and their products have been deleted.", "success").then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Something went wrong!',
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!',
                    });
                }
            }
        });
    });



</script>